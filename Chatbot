# Importing libraries

import numpy as np
import nltk
import string
import random

# Importing and reading the corpus

f=open('chatbot.txt','r',errors='ignore')#corpus or working environment has access to it 
raw_doc=f.read()#read the document
raw_doc=raw_doc.lower()#Converts text into lowercase as this stage of pre processing
nltk.download('punkt')#Tokenizer Punkt used for divide the text sentence into list of sentences under unsupervised algorithm to build model of abbreviation words or collocations
nltk.download('wordnet')#Wordnet is an English dictionary which is a part of Natural Language Tool Kit for python
sent_tokens=nltk.sent_tokenize(raw_doc)#Converts doc to list of sentences
word_tokens=nltk.word_tokenize(raw_doc)#Converts doc to list of words 

# Examples of sentance tokens

sent_tokens[:9]

# Examples of word tokens

word_tokens[:10]

# Text processing

lemmer=nltk.stem.WordNetLemmatizer()#Lemmatization is the process of grouping together the different inflected forms of a word so they can be analysed as a single item
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict=dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
      return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))
    
    
# Greeting Functions
    
    GREET_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREET_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]



# Checking for greetings
def greet(sentence):
    """If user's input is a greeting, return a greeting response"""
    for word in sentence.split():
        if word.lower() in GREET_INPUTS:
            return random.choice(GREET_RESPONSES)

# Response Generation

from sklearn.feature_extraction.text import TfidfVectorizer #Tfidf=Term frequency inverse document frequency
from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
   robo1_response=''
   TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
   tfidf = TfidfVec.fit_transform(sent_tokens)
   vals = cosine_similarity(tfidf[-1], tfidf)
   idx=vals.argsort()[0][-2]
   flat = vals.flatten()
   flat.sort()
   req_tfidf = flat[-2]
   if(req_tfidf==0):
      robo1_response=robo_response+"I am sorry! I don't understand you"
      return robo1_response
   else:
    robo1_response = robo1_response+sent_tokens[idx]
    return robo1_response
    
  #   Defining conversation start/end protocols
    
    flag=True
print("ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
            if(greet(user_response)!=None):
                print("ROBO: "+greet(user_response))
            else:
                sent_tokens.append(user_response)
                word_tokens=word_tokens+nltk.word_tokenize(user_response)
                final_words=list(set(word_tokens))
                print("ROBO: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..<3")    


